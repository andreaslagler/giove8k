/*
Copyright (C) 2021 Andreas Lagler

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef OSC_ENUMS_H
#define	OSC_ENUMS_H


#if __cplusplus

#include <stdint.h>

// For the controller C++ project, patch parameter is implemented as enum class
#define DEFINE_OSC1_WAVEFORM(param) param
enum class Osc1Waveform : uint8_t

#else

#define DEFINE_OSC1_WAVEFORM(param) EOSC1_WAVEFORM_##param
typedef enum

#endif

// This is the actual enum definition part
{
    DEFINE_OSC1_WAVEFORM(SSAW) = 0,
    DEFINE_OSC1_WAVEFORM(TRIMOD),
    DEFINE_OSC1_WAVEFORM(FEEDBACK),
    DEFINE_OSC1_WAVEFORM(RECT),
    DEFINE_OSC1_WAVEFORM(SAW),
    DEFINE_OSC1_WAVEFORM(TRI),
    DEFINE_OSC1_WAVEFORM(SINE),
    DEFINE_OSC1_WAVEFORM(NOISE),
    DEFINE_OSC1_WAVEFORM(NOFENTRIES),
    DEFINE_OSC1_WAVEFORM(MIN) = 0,
    DEFINE_OSC1_WAVEFORM(MAX) = DEFINE_OSC1_WAVEFORM(NOFENTRIES)-1
}

#if __cplusplus

;

#else

// end of typedef
Osc1Waveform;

#endif

#undef DEFINE_OSC1_WAVEFORM

#if __cplusplus

#include <stdint.h>

// For the controller C++ project, patch parameter is implemented as enum class
#define DEFINE_OSC2_WAVEFORM(param) param
enum class Osc2Waveform : uint8_t

#else

#define DEFINE_OSC2_WAVEFORM(param) EOSC2_WAVEFORM_##param
typedef enum

#endif

// This is the actual enum definition part
{
    DEFINE_OSC2_WAVEFORM(RECT) = 0,
    DEFINE_OSC2_WAVEFORM(SAW),
    DEFINE_OSC2_WAVEFORM(TRI),
    DEFINE_OSC2_WAVEFORM(SINE),
    DEFINE_OSC2_WAVEFORM(NOISE),
    DEFINE_OSC2_WAVEFORM(NOFENTRIES),
    DEFINE_OSC2_WAVEFORM(MIN) = 0,
    DEFINE_OSC2_WAVEFORM(MAX) = DEFINE_OSC2_WAVEFORM(NOFENTRIES)-1
}


#if __cplusplus

;

#else

// end of typedef
Osc2Waveform;

#define OSC_TYPE(osc1Waveform, osc2Waveform, sync) ((osc1Waveform * (DEFINE_OSC2_WAVEFORM(NOFENTRIES) * 2)) + (osc2Waveform * 2) + sync)

typedef enum
{
    EOSC_TYPE_SSAW_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_SSAW_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_SSAW_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_SSAW_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_SSAW_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_SSAW_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_SSAW_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_SSAW_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_SSAW_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_SSAW_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SSAW, EOSC2_WAVEFORM_NOISE, 1),
 
    EOSC_TYPE_TRIMOD_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_TRIMOD_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_TRIMOD_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_TRIMOD_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_TRIMOD_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_TRIMOD_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_TRIMOD_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_TRIMOD_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_TRIMOD_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_TRIMOD_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRIMOD, EOSC2_WAVEFORM_NOISE, 1),
 
    EOSC_TYPE_FEEDBACK_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_FEEDBACK_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_FEEDBACK_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_FEEDBACK_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_FEEDBACK_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_FEEDBACK_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_FEEDBACK_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_FEEDBACK_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_FEEDBACK_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_FEEDBACK_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_FEEDBACK, EOSC2_WAVEFORM_NOISE, 1),
 
    EOSC_TYPE_RECT_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_RECT_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_RECT_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_RECT_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_RECT_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_RECT_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_RECT_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_RECT_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_RECT_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_RECT_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_RECT, EOSC2_WAVEFORM_NOISE, 1),
 
    EOSC_TYPE_SAW_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_SAW_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_SAW_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_SAW_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_SAW_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_SAW_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_SAW_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_SAW_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_SAW_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_SAW_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SAW, EOSC2_WAVEFORM_NOISE, 1),
 
    EOSC_TYPE_TRI_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_TRI_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_TRI_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_TRI_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_TRI_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_TRI_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_TRI_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_TRI_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_TRI_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_TRI_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_TRI, EOSC2_WAVEFORM_NOISE, 1),

    EOSC_TYPE_SINE_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_SINE_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_SINE_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_SINE_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_SINE_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_SINE_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_SINE_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_SINE_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_SINE_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_SINE_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_SINE, EOSC2_WAVEFORM_NOISE, 1),

    EOSC_TYPE_NOISE_RECT_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_RECT, 0),
    EOSC_TYPE_NOISE_RECT_SYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_RECT, 1),
    EOSC_TYPE_NOISE_SAW_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_SAW, 0),
    EOSC_TYPE_NOISE_SAW_SYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_SAW, 1),
    EOSC_TYPE_NOISE_TRI_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_TRI, 0),
    EOSC_TYPE_NOISE_TRI_SYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_TRI, 1),
    EOSC_TYPE_NOISE_SINE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_SINE, 0),
    EOSC_TYPE_NOISE_SINE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_SINE, 1),
    EOSC_TYPE_NOISE_NOISE_NOSYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_NOISE, 0),
    EOSC_TYPE_NOISE_NOISE_SYNC = OSC_TYPE(EOSC1_WAVEFORM_NOISE, EOSC2_WAVEFORM_NOISE, 1),
 
    EOSC_TYPE_NOFENTRIES    
}
OscType;

#endif

#undef DEFINE_OSC1_WAVEFORM

#endif
