/*
Copyright (C) 2021 Andreas Lagler

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef PATCH_PARAM_ENUMS_H
#define PATCH_PARAM_ENUMS_H

#if __cplusplus

#include <stdint.h>
#include "type_traits.h"

// For the controller C++ project, patch parameter is implemented as enum class 
#define DEFINE_PATCH_PARAM(param) param
enum class PatchParam : uint8_t

#else

#define DEFINE_PATCH_PARAM(param) EPATCH_PARAM_##param
typedef enum

#endif

// This is the actual enum definition part
{
    // Enum / other params
    DEFINE_PATCH_PARAM(OSC1_PITCH) = 0,
    DEFINE_PATCH_PARAM(OSC1_DETUNE),
    DEFINE_PATCH_PARAM(OSC1_WAVEFORM),
    DEFINE_PATCH_PARAM(OSC2_PITCH),
    DEFINE_PATCH_PARAM(OSC2_DETUNE),
    DEFINE_PATCH_PARAM(OSC2_WAVEFORM),
    DEFINE_PATCH_PARAM(OSC_SYNC),
    DEFINE_PATCH_PARAM(LEGATO),
    DEFINE_PATCH_PARAM(FILTER_TYPE),
    DEFINE_PATCH_PARAM(FILTER_ENV_A),
    DEFINE_PATCH_PARAM(FILTER_ENV_D),
    DEFINE_PATCH_PARAM(FILTER_ENV_R),
    DEFINE_PATCH_PARAM(AMP_ENV_A),
    DEFINE_PATCH_PARAM(AMP_ENV_D),
    DEFINE_PATCH_PARAM(AMP_ENV_R),
    DEFINE_PATCH_PARAM(AUX_ENV_A),
    DEFINE_PATCH_PARAM(AUX_ENV_D),
    DEFINE_PATCH_PARAM(AUX_ENV_R),
    DEFINE_PATCH_PARAM(LFO1_WAVEFORM),
    DEFINE_PATCH_PARAM(LFO2_WAVEFORM),
    DEFINE_PATCH_PARAM(LFO_SYNC),
    DEFINE_PATCH_PARAM(CHORUS_DEPTH),
    DEFINE_PATCH_PARAM(ECHO_DELAY),

    // unsigned integer params
    DEFINE_PATCH_PARAM(OSC1_SHAPE1),
    DEFINE_PATCH_PARAM(OSC1_SHAPE2),
    DEFINE_PATCH_PARAM(OSC2_SHAPE),
    DEFINE_PATCH_PARAM(OSC_SYNC_PHASE),
    DEFINE_PATCH_PARAM(OSC_CROSSMOD),
    DEFINE_PATCH_PARAM(OSC_RINGMOD),
    DEFINE_PATCH_PARAM(OSC_BALANCE),
    DEFINE_PATCH_PARAM(GLIDE_TIME),
    DEFINE_PATCH_PARAM(FILTER_FREQ),
    DEFINE_PATCH_PARAM(FILTER_SHAPE),
    DEFINE_PATCH_PARAM(FILTER_ENV_S),
    DEFINE_PATCH_PARAM(LEVEL),
    DEFINE_PATCH_PARAM(PAN),
    DEFINE_PATCH_PARAM(AMP_ENV_S),
    DEFINE_PATCH_PARAM(AUX_ENV_S),
    DEFINE_PATCH_PARAM(LFO1_RATE),
    DEFINE_PATCH_PARAM(LFO2_RATE),
    DEFINE_PATCH_PARAM(LFO_SYNC_PHASE),
    DEFINE_PATCH_PARAM(CHORUS_RATE),
    DEFINE_PATCH_PARAM(CHORUS_MODDEPTH),
    DEFINE_PATCH_PARAM(CHORUS_SPREAD),
    DEFINE_PATCH_PARAM(CHORUS_MIX),
    DEFINE_PATCH_PARAM(ECHO_FEEDBACK),
    DEFINE_PATCH_PARAM(ECHO_SPREAD),
    DEFINE_PATCH_PARAM(ECHO_BRIGHTNESS),
    DEFINE_PATCH_PARAM(ECHO_MIX),
    DEFINE_PATCH_PARAM(BITCRUSHER_SAMPLERATE),
    DEFINE_PATCH_PARAM(BITCRUSHER_QUANTIZATION),
    DEFINE_PATCH_PARAM(BITCRUSHER_MIX),
    DEFINE_PATCH_PARAM(DISTORTION_DRIVE),
    DEFINE_PATCH_PARAM(DISTORTION_SHAPE),
    DEFINE_PATCH_PARAM(DISTORTION_MIX),

    // signed integer params
    DEFINE_PATCH_PARAM(FILTER_ENV_AMOUNT),
    DEFINE_PATCH_PARAM(FILTER_KEYTRACK),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC1_PITCH),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC1_PITCH),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC1_PITCH),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC1_PITCH),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC2_PITCH),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC2_PITCH),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC2_PITCH),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC2_PITCH),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC1_SHAPE1),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC1_SHAPE1),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC1_SHAPE1),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC1_SHAPE1),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC1_SHAPE2),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC1_SHAPE2),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC1_SHAPE2),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC1_SHAPE2),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC2_SHAPE),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC2_SHAPE),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC2_SHAPE),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC2_SHAPE),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC_SYNC_PHASE),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC_SYNC_PHASE),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC_SYNC_PHASE),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC_SYNC_PHASE),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC_CROSSMOD),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC_CROSSMOD),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC_CROSSMOD),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC_CROSSMOD),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC_RINGMOD),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC_RINGMOD),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC_RINGMOD),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC_RINGMOD),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_OSC_BALANCE),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_OSC_BALANCE),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_OSC_BALANCE),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_OSC_BALANCE),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_FILTER_FREQ),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_FILTER_FREQ),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_FILTER_FREQ),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_FILTER_SHAPE),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_FILTER_SHAPE),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_FILTER_SHAPE),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_FILTER_SHAPE),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_LEVEL),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_LEVEL),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_LEVEL),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_PAN),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_PAN),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_PAN),
    DEFINE_PATCH_PARAM(LFO2_AMOUNT_PAN),

    DEFINE_PATCH_PARAM(MODWHEEL_AMOUNT_LFO2_RATE),
    DEFINE_PATCH_PARAM(AUXENV_AMOUNT_LFO2_RATE),
    DEFINE_PATCH_PARAM(LFO1_AMOUNT_LFO2_RATE),

    DEFINE_PATCH_PARAM(BASS),
    DEFINE_PATCH_PARAM(TREBLE),


    // Auxiliary params
    DEFINE_PATCH_PARAM(DUMMY),
    DEFINE_PATCH_PARAM(NOFENTRIES),
    DEFINE_PATCH_PARAM(MIN) = 0,
    DEFINE_PATCH_PARAM(MAX) = DEFINE_PATCH_PARAM(NOFENTRIES)-1
}


#if __cplusplus

;

inline PatchParam& operator++(PatchParam & arg)
{
    return arg = static_cast<PatchParam>(static_cast<uint8_t>(arg)+1);
}

inline PatchParam& operator--(PatchParam & arg)
{
    return arg = static_cast<PatchParam>(static_cast<uint8_t>(arg)-1);
}

/**
@brief Numeric limits of PatchParam
*/
template <>
struct numeric_limits <PatchParam>
{
    /**
    @brief Maximum value
    @result Maximum value of PatchParam
    */
    static constexpr PatchParam max()
    {
        return PatchParam::MAX;
    }
    
    /**
    @brief Minimum value
    @result Minimum value of PatchParam
    */
    static constexpr PatchParam min()
    {
        return PatchParam::MIN;
    }
};

#else

// end of typedef
EPATCH_PARAM;

#endif

#undef DEFINE_PATCH_PARAM


#endif